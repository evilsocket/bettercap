#!/usr/bin/env ruby

=begin

  BETTERCAP

  Author : Simone 'evilsocket' Margaritelli
  Email  : evilsocket@gmail.com
  Blog   : http://www.evilsocket.net/

  This project is released under the GPL 3 license.

=end

require 'bettercap'

begin
  BetterCap::Banner.print
  puts "\n\n\n"

  ctx = BetterCap::Context.get
  opts = BetterCap::Options.new(ARGV)

  if ctx.options[:check_updates]
    error_policy = lambda { |e|
      BetterCap::Logger.error("Could not check for udpates: #{e.message}")
    }

    ctx.check_updates(error_policy)
    exit
  end

  raise BetterCap::Error, 'This software must run as root.' unless Process.uid == 0
  raise BetterCap::Error, 'No default interface found, please specify one with the -I argument.' unless !ctx.options[:iface].nil?

  BetterCap::Logger.debug_enabled = true unless !ctx.options[:debug]

  BetterCap::Logger.logfile = ctx.options[:logfile]

  ctx.update_network

  if ctx.options[:target].nil?
    BetterCap::Logger.info "Targeting the whole subnet #{ctx.network.to_range} ..."

    ctx.start_discovery_thread
  else
    targets = ctx.options[:target].split(",")
    valid_targets = targets.select { |target| Network.is_ip?(target) }

    raise BetterCap::Error, "Invalid target" if valid_targets.empty?

    invalid_targets = targets - valid_targets
    invalid_targets.each do |target|
      BetterCap::Logger.warn "Invalid target #{target}"
    end

    ctx.targets = valid_targets.map { |target| Target.new(target) }
  end

  ctx.spoofer = SpooferFactory.get_by_name( ctx.options[:spoofer] )

  BetterCap::Logger.info "  Local : #{ctx.ifconfig[:ip_saddr]} ( #{ctx.ifconfig[:eth_saddr]} )"

  BetterCap::Logger.debug "Module: #{ctx.options[:spoofer]}"

  ctx.spoofer.start

  if ctx.options[:proxy]
    if ctx.options[:sniffer] and ( ctx.options[:parsers].include?'*' or ctx.options[:parsers].include?'URL' )
      BetterCap::Logger.warn "WARNING: Both HTTP transparent proxy and URL parser are enabled, you're gonna see duplicated logs."
    end

    ctx.enable_port_redirection

    ctx.create_proxies
  end

  if ctx.options[:httpd]
    ctx.httpd = HTTPD::Server.new( ctx.options[:httpd_port], ctx.options[:httpd_path] )
    ctx.httpd.start
  end

  if ctx.options[:sniffer]
    Sniffer.start ctx
  else
    if ctx.options[:spoofer] != 'NONE' and ctx.options[:spoofer] != 'none'
      BetterCap::Logger.warn 'WARNING: Sniffer module was NOT enabled ( -X argument ), this will cause the MITM to run but no data to be collected.'
    end

    loop do
      sleep 1
    end
  end

rescue SystemExit, Interrupt
  BetterCap::Logger.write "\n"

rescue BetterCap::Error => e
  BetterCap::Logger.error e.message

rescue Exception => e
  BetterCap::Logger.error e.message
  BetterCap::Logger.error e.backtrace.join("\n")

ensure
  ctx.finalize unless ctx.nil?
end
